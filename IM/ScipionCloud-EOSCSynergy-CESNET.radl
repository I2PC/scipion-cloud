network public (
    outbound = 'yes' and
    outports = '5904/tcp'
)
network private ()

system node (
    instance_type = 'hpc.8core-64ram-nvidia-1080-glados' and
    net_interface.0.connection = 'public' and
    net_interface.1.connection = 'private' and
    disk.0.os.name='linux' and
    disk.0.image.url = 'ost://identity.cloud.muni.cz/be43a104-f338-4045-b0b8-c407e2e5d0d0'
)

configure node (
@begin
---
# Put here your Ansible recipes to configure the nodes
- vars:
    docker_runtime: |
      {
        "mtu": 1442,
        "runtimes": {
          "nvidia": {
            "path": "/usr/bin/nvidia-container-runtime",
            "runtimeArgs": []
          }
        },
        "default-runtime": "nvidia"
      }

  tasks:
  #- name: Remove nouveau driver
  #  apt:
  #    name: ['libdrm-nouveau2','xserver-xorg-video-nouveau']
  #    autoremove: yes
  #    state: absent
  #    purge: yes

  - name: Disable nouveau module
    copy:
      content: "blacklist nouveau\noptions nouveau modeset=0"
      dest: /etc/modprobe.d/blacklist-nouveau.conf

# Install nvidia driver - 1st option
  - name: Install required packages for nvidia driver
    apt:
      name: ['dkms']
      state: present
      update_cache: yes
  - name: Download script from nvidia
    get_url:
      url: https://us.download.nvidia.com/XFree86/Linux-x86_64/450.66/NVIDIA-Linux-x86_64-450.66.run
      dest: /opt/cloudadm/NVIDIA-Linux-x86_64-450.66.run
  - name: Add executable mode
    file:
      path: /opt/cloudadm/NVIDIA-Linux-x86_64-450.66.run
      mode: +x
  - name: Get uname -r
    shell: uname -r
    register: uname_r
  - name: Install linux-headers
    apt:
      name: ['linux-source', 'linux-image-{{ uname_r.stdout }}', 'linux-headers-{{ uname_r.stdout }}']
      state: present
  - name: Install drivers
    shell: /opt/cloudadm/NVIDIA-Linux-x86_64-450.66.run --dkms --silent

  - name: Install required packages
    apt:
      name: ['xdm', 'curl', 'wget', 'git', 'htop', 'python-pip', 'apt-transport-https', 'ca-certificates', 'gnupg-agent', 'software-properties-common', 'xserver-xorg', 'pkg-config']
      state: present
      update_cache: yes

  - name: Add docker GPG key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Get release name
    shell: lsb_release -cs
    register: release_name
  - name: Add docker registry
    apt_repository: repo='deb [arch=amd64] https://download.docker.com/linux/debian {{ release_name.stdout }} stable' state=present

  - name: Install docker
    package:
      name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
      state: present

  - name: Install pip docker
    pip:
      name: docker

  - name: Add user to docker group and change shell
    shell: usermod --shell /bin/bash -aG docker cloudadm

  - name: Start docker service
    service:
      name: docker
      state: restarted

  - name: Get release name
    shell: . /etc/os-release;echo $ID$VERSION_ID
    register: distribution
  - name: Add nvidia docker runtime source
    shell: 'curl -s -L https://nvidia.github.io/nvidia-docker/{{ distribution.stdout }}/nvidia-docker.list | tee /etc/apt/sources.list.d/nvidia-docker.list'
  - name: Add nvidia docker runtime GPG 1/2
    apt_key:
      url: https://nvidia.github.io/nvidia-docker/gpgkey
      state: present
  - name: Add nvidia docker runtime GPG 2/2
    apt_key:
      url: https://nvidia.github.io/nvidia-container-runtime/gpgkey
      state: present
  
  - name: Install nvidia-container-toolkit and nvidia-container-runtime
    apt:
      name: ['nvidia-container-toolkit', 'nvidia-container-runtime']
      update_cache: yes

  - name: Get GPU PCI port
    shell: nvidia-xconfig --query-gpu-info | grep 'PCI BusID' | cut -f2- -d':' | cut -f2- -d' '
    register: gpu_pci_port
  - name: Create xorg.conf
    shell: nvidia-xconfig -a --allow-empty-initial-configuration --use-display-device=None --virtual=1920x1080 --busid {{ gpu_pci_port.stdout }}
  - name: Add HardDPMS to xorg.conf
    lineinfile:
      path: /etc/X11/xorg.conf
      insertafter: '\s+Option\s+\"AllowEmptyInitialConfiguration\"\s+\"True\"'
      line: '    Option         "HardDPMS" "false"'
  
  - name: Disable authorization for xdm
    lineinfile:
      path: /etc/X11/xdm/xdm-config
      regexp: 'DisplayManager\*authorize:\s+true'
      line: 'DisplayManager*authorize: false'
  
  - name: Set nvidia as default docker runtime
    copy:
      content: "{{ docker_runtime }}"
      dest: /etc/docker/daemon.json

  - name: Remove ".X11-unix" dir to prevent xorg issues
    file:
      path: /tmp/.X11-unix
      state: absent
  - name: Restart display-manager
    service:
      name: display-manager
      state: restarted
  - name: Restart docker
    service:
      name: docker
      state: restarted
  - name: Run Scipion master container
    shell: docker run -d --name=scipionmaster --privileged -p 5904:5904 -e USE_DISPLAY="4" -e ROOT_PASS="abc" -e USER_PASS="abc" -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 registry.gitlab.ics.muni.cz:443/eosc-synergy/scipion-docker:latest
@end
)

deploy node 1
