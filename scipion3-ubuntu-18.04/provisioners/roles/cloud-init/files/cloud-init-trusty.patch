diff -Naur distros_orig/debian.py distros/debian.py
--- distros_orig/debian.py	2014-04-01 20:26:07.000000000 +0200
+++ distros/debian.py	2017-01-10 12:31:16.182469360 +0100
@@ -74,19 +74,29 @@
         self.update_package_sources()
         self.package_command('install', pkgs=pkglist)
 
-    def _write_network(self, settings):
-        util.write_file(self.network_conf_fn, settings)
+    def _write_network(self, settings, do_write=True):
+        if do_write:
+            util.write_file(self.network_conf_fn, settings)
         return ['all']
 
-    def _bring_up_interfaces(self, device_names):
+    def _bring_interfaces(self, device_names, action):
         use_all = False
         for d in device_names:
             if d == 'all':
                 use_all = True
         if use_all:
-            return distros.Distro._bring_up_interface(self, '--all')
+            return action(self, '--all')
         else:
-            return distros.Distro._bring_up_interfaces(self, device_names)
+            return action(self, device_names)
+
+    def _bring_up_interfaces(self, device_names):
+        return self._bring_interfaces(device_names,
+                                      distros.Distro._bring_up_interface)
+
+    def _bring_down_interfaces(self, device_names):
+        return self._bring_interfaces(device_names,
+                                      distros.Distro._bring_down_interface)
+
 
     def _select_hostname(self, hostname, fqdn):
         # Prefer the short hostname over the long
diff -Naur distros_orig/__init__.py distros/__init__.py
--- distros_orig/__init__.py	2016-11-25 13:21:28.000000000 +0100
+++ distros/__init__.py	2017-01-10 12:32:28.898469360 +0100
@@ -67,7 +67,7 @@
         raise NotImplementedError()
 
     @abc.abstractmethod
-    def _write_network(self, settings):
+    def _write_network(self, settings, do_write=True):
         # In the future use the http://fedorahosted.org/netcf/
         # to write this blob out in a distro format
         raise NotImplementedError()
@@ -115,6 +115,9 @@
                                         mirror_info=arch_info)
 
     def apply_network(self, settings, bring_up=True):
+        if bring_up:
+            dev_names = self._write_network(settings, do_write=False)
+            self._bring_down_interfaces(dev_names)
         # Write it out
         dev_names = self._write_network(settings)
         # Now try to bring them up
@@ -269,9 +272,9 @@
             contents.write("%s\n" % (eh))
             util.write_file(self.hosts_fn, contents.getvalue(), mode=0644)
 
-    def _bring_up_interface(self, device_name):
-        cmd = ['ifup', device_name]
-        LOG.debug("Attempting to run bring up interface %s using command %s",
+    def _bring_interface(self, device_name, command):
+        cmd = [command, device_name]
+        LOG.debug("Attempting to manage interface %s using command %s",
                    device_name, cmd)
         try:
             (_out, err) = util.subp(cmd)
@@ -282,15 +285,27 @@
             util.logexc(LOG, "Running interface command %s failed", cmd)
             return False
 
-    def _bring_up_interfaces(self, device_names):
+    def _bring_up_interface(self, device_name):
+        return self._bring_interface(device_name, 'ifup')
+
+    def _bring_down_interface(self, device_name):
+        return self._bring_interface(device_name, 'ifdown')
+
+    def _bring_interfaces(self, device_names, action):
         am_failed = 0
         for d in device_names:
-            if not self._bring_up_interface(d):
+            if not action(d):
                 am_failed += 1
         if am_failed == 0:
             return True
         return False
 
+    def _bring_up_interfaces(self, device_names):
+        return self._bring_interfaces(device_names, self._bring_up_interface)
+
+    def _bring_down_interfaces(self, device_names):
+        return self._bring_interfaces(device_names, self._bring_down_interface)
+
     def get_default_user(self):
         return self.get_option('default_user')
 
diff -Naur distros_orig/rhel.py distros/rhel.py
--- distros_orig/rhel.py	2014-04-01 20:26:07.000000000 +0200
+++ distros/rhel.py	2017-01-10 12:31:16.186469360 +0100
@@ -62,7 +62,7 @@
     def install_packages(self, pkglist):
         self.package_command('install', pkgs=pkglist)
 
-    def _write_network(self, settings):
+    def _write_network(self, settings, do_write=True):
         # TODO(harlowja) fix this... since this is the ubuntu format
         entries = net_util.translate_network(settings)
         LOG.debug("Translated ubuntu style network settings %s into %s",
@@ -83,15 +83,16 @@
                 'MACADDR': info.get('hwaddress'),
                 'ONBOOT': _make_sysconfig_bool(info.get('auto')),
             }
-            rhel_util.update_sysconfig_file(net_fn, net_cfg)
+            if do_write:
+                rhel_util.update_sysconfig_file(net_fn, net_cfg)
             if 'dns-nameservers' in info:
                 nameservers.extend(info['dns-nameservers'])
             if 'dns-search' in info:
                 searchservers.extend(info['dns-search'])
-        if nameservers or searchservers:
+        if (nameservers or searchservers) and do_write:
             rhel_util.update_resolve_conf_file(self.resolve_conf_fn,
                                                nameservers, searchservers)
-        if dev_names:
+        if dev_names and do_write:
             net_cfg = {
                 'NETWORKING': _make_sysconfig_bool(True),
             }
@@ -155,11 +156,19 @@
             else:
                 return default
 
-    def _bring_up_interfaces(self, device_names):
+    def _bring_interfaces(self, device_names, action):
         if device_names and 'all' in device_names:
             raise RuntimeError(('Distro %s can not translate '
                                 'the device name "all"') % (self.name))
-        return distros.Distro._bring_up_interfaces(self, device_names)
+        return action(self, device_names)
+
+    def _bring_up_interfaces(self, device_names):
+        return self._bring_interfaces(device_names,
+                                      distros.Distro._bring_up_interfaces)
+
+    def _bring_down_interfaces(self, device_names):
+        return self._bring_interfaces(device_names,
+                                      distros.Distro._bring_down_interfaces)
 
     def set_timezone(self, tz):
         tz_file = self._find_tz_file(tz)
diff -Naur distros_orig/sles.py distros/sles.py
--- distros_orig/sles.py	2014-04-01 20:26:07.000000000 +0200
+++ distros/sles.py	2017-01-10 12:31:16.186469360 +0100
@@ -53,7 +53,7 @@
     def install_packages(self, pkglist):
         self.package_command('install', args='-l', pkgs=pkglist)
 
-    def _write_network(self, settings):
+    def _write_network(self, settings, do_write=True):
         # Convert debian settings to ifcfg format
         entries = net_util.translate_network(settings)
         LOG.debug("Translated ubuntu style network settings %s into %s",
@@ -84,12 +84,13 @@
                 net_cfg['ETHTOOL_OPTIONS'] = ''
             else:
                 net_cfg['FIREWALL'] = 'no'
-            rhel_util.update_sysconfig_file(net_fn, net_cfg, True)
+            if do_write:
+                rhel_util.update_sysconfig_file(net_fn, net_cfg, True)
             if 'dns-nameservers' in info:
                 nameservers.extend(info['dns-nameservers'])
             if 'dns-search' in info:
                 searchservers.extend(info['dns-search'])
-        if nameservers or searchservers:
+        if (nameservers or searchservers) and do_write:
             rhel_util.update_resolve_conf_file(self.resolve_conf_fn,
                                                nameservers, searchservers)
         return dev_names
@@ -142,11 +143,19 @@
             return default
         return hostname
 
-    def _bring_up_interfaces(self, device_names):
+    def _bring_interfaces(self, device_names):
         if device_names and 'all' in device_names:
             raise RuntimeError(('Distro %s can not translate '
                                 'the device name "all"') % (self.name))
-        return distros.Distro._bring_up_interfaces(self, device_names)
+        return cb(self, device_names)
+
+    def _bring_up_interfaces(self, device_names):
+        return self._bring_interfaces(device_names,
+                                      distros.Distro._bring_up_interfaces)
+
+    def _bring_down_interfaces(self, device_names):
+        return self._bring_interfaces(device_names,
+                                      distros.Distro._bring_down_interfaces)
 
     def set_timezone(self, tz):
         tz_file = self._find_tz_file(tz)
